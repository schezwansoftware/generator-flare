import {Injectable} from '@nestjs/common';
import {InjectModel} from '@nestjs/mongoose';
import {Model} from 'mongoose';
import {<%= entityClassName %>, I<%= entityClassName %>} from './<%= entityBaseFileName %>.interface';

@Injectable()
export class <%= entityClassName %>Repository {
    constructor(
        @InjectModel('<%= entityClassName %>') private readonly <%= entityName %>Model: Model<<%= entityClassName %>>,
           ) { }

    async save(<%= entityName %>: I<%= entityClassName %>): Promise<I<%= entityClassName %>> {
        const new<%= entityClassName %> = new this.<%= entityName %>Model(<%= entityName %>);
        return new<%= entityClassName %>.save();
    }

    async update(<%= entityName %>: I<%= entityClassName %>): Promise<I<%= entityClassName %>> {
        return await this.<%= entityName %>Model.findByIdAndUpdate(<%= entityName %>.id, <%= entityName %> , {new: true});
    }

    async findAll(): Promise<I<%= entityClassName %>[]> {
        return await this.<%= entityName %>Model.find();
    }

    async findById(id: string): Promise<I<%= entityClassName %>> {
        return await this.<%= entityName %>Model.findById(id);
    }

    async deleteById(id: string): Promise<void> {
        await this.<%= entityName %>Model.findByIdAndDelete(id);
    }
}
