import {Injectable} from '@nestjs/common';
import {I<%= entityClassName %>} from './<%= entityBaseFileName %>.interface';
import {<%= entityClassName %>DTO} from './<%= entityBaseFileName %>.DTO';

@Injectable()
export class <%= entityClassName %>Mapper {

  static map<%= entityClassName %>To<%= entityClassName %>DTO(<%= entityName %>: I<%= entityClassName %>): <%= entityClassName %>DTO {
    return {
      id: <%= entityName %>.id,
      <% for(const field of generatedFields) { %>
      <%= field.fieldName %>: <%= entityName %>.<%= field.fieldName %>,
      <% } %>
    };
  }

  static map<%= entityClassName %>DTOTo<%= entityClassName %>(<%= entityName %>DTO: <%= entityClassName %>DTO): I<%= entityClassName %> {
    return {
      id: <%= entityName %>DTO.id,
      <% for(const field of generatedFields) { %>
      <%= field.fieldName %>: <%= entityName %>DTO.<%= field.fieldName %>,
      <% } %>
    };
  }

  static map<%= entityClassName %>ListTo<%= entityClassName %>DTOList(<%= entityName %>List: I<%= entityClassName %>[]): <%= entityClassName %>DTO[] {
    const <%= entityName %>DTOList: <%= entityClassName %>DTO[] = [];
    for (const <%= entityName %> of <%= entityName %>List) {
      const <%= entityName %>DTO = <%= entityClassName %>Mapper.map<%= entityClassName %>To<%= entityClassName %>DTO(<%= entityName %>);
      <%= entityName %>DTOList.push(<%= entityName %>DTO);
    }
    return <%= entityName %>DTOList;
  }
}
