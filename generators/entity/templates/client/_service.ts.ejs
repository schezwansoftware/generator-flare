import {Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {<%= entityInterfaceName %>} from '../../shared/model/<%= baseName %>.model';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';
import * as moment from 'moment';

type EntityResponseType = HttpResponse<<%= entityInterfaceName %>>;
type EntityArrayResponseType = HttpResponse<<%= entityInterfaceName %>[]>;

@Injectable({providedIn: 'root'})
export class <%= entityClassName %>Service {
    public resourceUrl = 'api/<%= entityAPIUrl %>';

    constructor(protected http: HttpClient) {
    }

    create(<%= entityName %>: <%= entityInterfaceName %>): Observable<EntityResponseType> {
       <% if (hasDateField) {%>const copy = this.convertDateFromClient(<%= entityName %>);
            <%}%>return this.http
                 .post<<%= entityInterfaceName %>>(this.resourceUrl,<% if (hasDateField) {%> copy <%}%> <% if (!hasDateField) {%><%=entityName %> <%}%>, {observe: 'response'})<% if (!hasDateField) {%>;<%}%>
    <% if (hasDateField) {%>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res))); <%}%>}

    update(<%= entityName %>: <%= entityInterfaceName %>): Observable<EntityResponseType> {
        <% if (hasDateField) {%>const copy = this.convertDateFromClient(<%= entityName %>);
        <%}%>return this.http
            .put<<%= entityInterfaceName %>>(this.resourceUrl,<% if (hasDateField) {%> copy <%}%> <% if (!hasDateField) {%><%=entityName %> <%}%>, {observe: 'response'})<% if (!hasDateField) {%>;<%}%>
    <% if (hasDateField) {%>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res))); <%}%>}

    find(id: string): Observable<EntityResponseType> {
        return this.http
            .get<<%= entityInterfaceName %>>(`${this.resourceUrl}/${id}`, {observe: 'response'})<% if (!hasDateField) {%>;<%}%>
    <% if (hasDateField) {%>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res))); <%}%>}

    query(req?: any): Observable<EntityArrayResponseType> {
        return this.http
            .get<<%= entityInterfaceName %>[]>(this.resourceUrl, {observe: 'response'})<% if (!hasDateField) {%>;<%}%>
    <% if (hasDateField) {%>.pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res))); <%}%>}

    delete(id: string): Observable<HttpResponse<any>> {
        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});
    }<% if(hasDateField){%>

    protected convertDateFromClient(<%=  entityName %>: <%=  entityInterfaceName %>): <%=  entityInterfaceName %> {
          const copy: <%=  entityInterfaceName -%> = Object.assign({}, <%- entityName -%>, {
          <%for (const field of generatedFields){%><%if(field.fieldType === 'Date'){%><%- field.fieldName -%>: <%- entityName -%>.<%= field.fieldName -%> != null && <%= entityName  -%>.<%= field.fieldName -%>.isValid() ? <%= entityName %>.<%= field.fieldName -%>.toJSON() : null,<%}%>
          <% } %>});
          return copy;
    }

    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {
          if (res.body) {
          <%for (const field of generatedFields){%><%if(field.fieldType === 'Date'){%>res.body.<%= field.fieldName -%> = res.body.<%= field.fieldName -%> != null ? moment(res.body.<%= field.fieldName -%>) : null;<%}%>
          <%}%>}
          return res;
    }

    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {
        if (res.body) {
            res.body.forEach((<%= entityName -%>: <%= entityInterfaceName -%>) => {
            <%for (const field of generatedFields){%><%if(field.fieldType === 'Date'){%><%- entityName -%>.<%= field.fieldName -%> = <%- entityName -%>.<%= field.fieldName -%> != null ? moment(<%- entityName -%>.<%= field.fieldName -%>) : null;<%}%>
            <%}%>});
        }
        return res;
    }
    <%}%>
}
